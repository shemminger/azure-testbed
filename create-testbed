#!/bin/bash

# Creates 3 machine Azure testbed
if [ $# -eq 0 ]; then
    echo "Usage: $0 [-b] basename [packages]"
    exit 1
fi

bootDiag=
if [ "$1" = '-b' ]; then
    bootDiag=yes
    shift
fi

# basename is component of global resources
baseName=$1
shift

# args from environment
location=${AZURE_LOCATION:-westus}
Sku=${AZURE_SKU:-D8s_v3}
pubKey=$AZURE_SSH_KEY
vmImage=${AZURE_IMAGE:-"Canonical:UbuntuServer:18.04-LTS:latest"}
user=${AZURE_USER:-$USER}
vmCount=${AZURE_TEST_COUNT:-2}
nicCount=${AZURE_NIC_COUNT:-2}

vmSize=Standard_${Sku}
rg=$user-$baseName-rg
vnet=$baseName-vnet
nsgName=$baseName-nsg

adminUsername=${AZURE_USER:-azure-user}

if [ -n "$bootDiag" ]; then
    # Storage accounts are limited to 24 characters and only alphanumeric
    # need it for boot diagnostics (and serial console)
    storageName=$(echo $rg $adminPassword | \
		      md5sum | awk '{ print "st"substr($1,20) }')
fi

# Logging with timestamp
log() {
    echo $(date +"%T") "$@"
}

log "Validate scripts"

# validate package args
githubPath="raw.githubusercontent.com/shemminger/azure-testbed/master/scripts/"

# rest of the args are the packages
# validate that script exists and build json arg
for pkg
do
    scriptName=$pkg".sh"
    if [ ! -x scripts/$scriptName ]; then
	>&2 echo "$scriptName not found or not executable"
	exit 1
    fi
    scriptUri="https://"${githubPath}${scriptName}
    wget -q -O /dev/null $scriptUri
    if [ $? -ne 0 ]; then
	>&2 echo "$scriptUri does not exist"
	exit 1
    fi
done

# AZ CLI gives chatty JSON output lets put elsewhere
TEMP=/tmp/az-output.$(date "+%F:%T")
log "Creating resources (see $TEMP)"

# Abort on error
set -e

log "Setup Azure resource group $rg in $location"

# create group / network / nsg
az group create --name $rg \
   --location $location >>$TEMP

subFront=$baseName-sub1
az network vnet create -g $rg \
   --name $vnet --address-prefix 172.16.0.0/16 \
   --subnet-name $subFront \
   --subnet-prefix 172.16.1.0/24 >>$TEMP

for n in $(seq 2 $nicCount)
do
    subName=$baseName-sub$n

    az network vnet subnet create -g $rg \
       --vnet-name $vnet --name $subName \
       --address-prefix 172.16.$n.0/24 >>$TEMP

done

az network nsg create --resource-group $rg \
  --name $nsgName >>$TEMP

az network nsg rule create --resource-group  $rg \
  --nsg-name $nsgName --name allow-ssh \
  --protocol tcp --direction inbound --priority 1000 --source-address-prefix '*' \
  --source-port-range '*' --destination-address-prefix '*' --destination-port-range 22 \
  --access allow >>$TEMP

## bastion server
vmPrefix=bastion1
vmSizeBastion=Standard_B1s
baseNameBastion=$vmPrefix
imageName=$vmImage
publicIp=pip-$baseName
vNic=nic-$baseNameBastion

log "Creating public IP $publicIp"

az network public-ip create --resource-group $rg \
    --name $publicIp --allocation-method static --idle-timeout 4 >> $TEMP

az network nic create \
    -n $vNic \
    -g $rg \
    --subnet $subFront \
    --network-security-group $nsgName \
    --public-ip-address $publicIp \
    --vnet-name $vnet  >> $TEMP

log "Creating Bastion Server: $baseNameBastion"
vmName=vm-$baseNameBastion
az vm create \
    -g $rg \
    --os-disk-name osdisk-$baseNameBastion \
    --name $vmName \
    --nics $vNic \
    --storage-sku premium_lrs \
    --size $vmSizeBastion \
    --image $imageName \
    --admin-username $adminUsername \
    --authentication-type ssh \
    --ssh-key-value "@$pubKey" >> $TEMP

log "Generate ssh key on bastion server"
bastionKey=/tmp/ssh-id_rsa.$vmName
az vm run-command invoke \
   -g $rg -n $vmName \
   --command-id RunShellScript \
   --scripts "su - $user -c \"ssh-keygen -N '' -f .ssh/id_rsa -t rsa; cat .ssh/id_rsa.pub\"" | \
    python -c 'import sys,json;print(json.load(sys.stdin)["value"][0]["message"])' | \
    grep '^ssh-rsa' > $bastionKey

# Ubuntu ACC
vmPrefix=test
accNet=true
imageName=$vmImage

for i in $(seq 1 $vmCount)
do
    baseNameLoop=$vmPrefix$i
    nics=()

    for n in $(seq 1 $nicCount)
    do
	nic=nic${n}-${baseNameLoop}
	subName=$baseName-sub$n
	nics[$n]=$nic

	log "Creating $nic"
	az network nic create -g $rg \
	   --name $nic \
	   --vnet $vnet \
	   --subnet $subName \
	   --network-security-group $nsgName \
	   --accelerated-networking true >>$TEMP
    done

    log "Creating vm-$baseNameLoop"
    az vm create \
        -g $rg \
        --os-disk-name osdisk-$baseNameLoop \
        --name vm-$baseNameLoop \
        --nics ${nics[@]} \
	--no-wait \
        --storage-sku premium_lrs \
        --size $vmSize \
        --image $imageName \
	--authentication-type all \
        --admin-username $adminUsername \
	--authentication-type ssh \
	--ssh-key-value "@$bastionKey" \
	--no-wait >>$TEMP

    log "vm-$baseNameLoop in progress"
done

# Enable boot diagnostics
if [ -n "$bootDiag" ]; then
    log "Enabling boot diagnostics"
    az storage account create --resource-group $rg \
      --name $storageName \
      --location $location \
      --sku Standard_LRS --kind StorageV2 >>$TEMP

    az vm boot-diagnostics enable --storage $storageName \
       --ids $(az vm list -g $rg --query "[].id" -o tsv) >>$TEMP
fi

# Wait for deployment
log "Waiting for VM deployment"
az vm wait --created --ids $(az vm list -g $rg --query "[].id" -o tsv) >>$TEMP

set +e

# Setup packages
for i in $(seq 1 $vmCount)
do
    # Run parallel threads one per VM
    ( for pkg
      do
	log "Setup $pkg on vm-$vmPrefix$i"
	scriptName=$pkg".sh"
	scriptJson=$(printf '{ "fileUris" : [ "%s" ], "commandToExecute" : "%s" }' \
		     'https://'${githubPath}${scriptName} './'$scriptName)

	az vm extension set \
	   -g $rg --vm-name vm-$vmPrefix$i \
	   --name customScript \
	   --publisher Microsoft.Azure.Extensions \
	   --settings "$scriptJson" >> $TEMP
      done ) &
done

wait

# Display result
log "Ready to go"
echo -n 'public ip: '
az network public-ip list -g $rg \
	       --query "[].{ip:ipAddress, vm:name}" | \
	python -c 'import sys,json;print(json.load(sys.stdin)[0]["ip"])'
